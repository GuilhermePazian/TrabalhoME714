#
e1 <- numeric(n)
e2 <- numeric(n)
#
for(i in 1:n){
eo <- sort(e[i,])
e1[i] <- (eo[2]+eo[3])/2
e2[i] <- (eo[97]+eo[98])/2}
#
med <- apply(e,1,mean)
faixa <- range(td,e1,e2)
#par(pty="s")
qqnorm(td,xlab="Percentil da N(0,1)",
ylab="Res?duo Componente do Desvio", ylim=faixa, pch=16,main="",cex=1.1,cex.axis=1.1,cex.lab=1.1)
#
par(new=T)
#
qqnorm(e1,axes=F,xlab="",ylab="",type="l",ylim=faixa,lty=1,main="")
par(new=T)
qqnorm(e2,axes=F,xlab="",ylab="", type="l",ylim=faixa,lty=1,main="")
par(new=T)
qqnorm(med,axes=F,xlab="", ylab="", type="l",ylim=faixa,lty=2,main="")
#---------------------------------------------------------------#
}
# Programa extra?do do site: https://www.ime.usp.br/~giapaula/textoregressao.htm
# Cr?ditos: Prof. Dr. Gilberto Alvarenga Paula
# Adaptado por Caio L. N. Azevedo
# source("D:\\windows\\Unicamp\\Disciplinas\\1_semestre_2016\\ME 720 MLG\\Programas\\envel_Bern.r")
envelBern <- function(fit.model,ligacao){
# fit.model: objeto com o resultado do ajuste do MLG obtido atrav?s da fun??o glm
# ligacao: fun??o de liga??o (mesmo nome usado pela fun??o glm (colocar entre aspas)
par(mfrow=c(1,1))
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
w <- fit.model$weights
W <- diag(w)
H <- solve(t(X)%*%W%*%X)
H <- sqrt(W)%*%X%*%H%*%t(X)%*%sqrt(W)
h <- diag(H)
td <- resid(fit.model,type="deviance")/sqrt(1-h)
e <- matrix(0,n,100)
#
for(i in 1:100){
dif <- runif(n) - fitted(fit.model)
dif[dif >= 0 ] <- 0
dif[dif<0] <- 1
nresp <- dif
fit <- glm(nresp ~ X, family=binomial(link=ligacao))
w <- fit$weights
W <- diag(w)
H <- solve(t(X)%*%W%*%X)
H <- sqrt(W)%*%X%*%H%*%t(X)%*%sqrt(W)
h <- diag(H)
e[,i] <- sort(resid(fit,type="deviance")/sqrt(1-h))}
#
e1 <- numeric(n)
e2 <- numeric(n)
#
for(i in 1:n){
eo <- sort(e[i,])
e1[i] <- (eo[2]+eo[3])/2
e2[i] <- (eo[97]+eo[98])/2}
#
med <- apply(e,1,mean)
faixa <- range(td,e1,e2)
#par(pty="s")
qqnorm(td,xlab="Percentil da N(0,1)",
ylab="Res?duo Componente do Desvio", ylim=faixa, pch=16,main="",cex=1.1,cex.axis=1.1,cex.lab=1.1)
#
par(new=T)
#
qqnorm(e1,axes=F,xlab="",ylab="",type="l",ylim=faixa,lty=1,main="")
par(new=T)
qqnorm(e2,axes=F,xlab="",ylab="", type="l",ylim=faixa,lty=1,main="")
par(new=T)
qqnorm(med,axes=F,xlab="", ylab="", type="l",ylim=faixa,lty=2,main="")
#---------------------------------------------------------------#
}
# Programa extra?do do site: https://www.ime.usp.br/~giapaula/textoregressao.htm
# Cr?ditos: Prof. Dr. Gilberto Alvarenga Paula
# Adaptado por Caio L. N. Azevedo
# source("D:\\windows\\Unicamp\\Disciplinas\\1_semestre_2016\\ME 720 MLG\\Programas\\diag_Bern.r")
diagBern<-function(fit.model){
# fit.model: objeto com o resultado do ajuste do MLG obtido atrav?s da fun??o glm
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
w <- fit.model$weights
W <- diag(w)
H <- solve(t(X)%*%W%*%X)
H <- sqrt(W)%*%X%*%H%*%t(X)%*%sqrt(W)
h <- diag(H)
ts <- resid(fit.model,type="pearson")/sqrt(1-h)
td <- resid(fit.model,type="deviance")/sqrt(1-h)
di <- (h/(1-h))*(ts^2)
a <- max(td)
b <- min(td)
par(mfrow=c(2,2))
plot(td,xlab="Indice", ylab="Residuo Componente do Desvio",
ylim=c(b-1,a+1), pch=16,cex.axis=1.1,cex.lab=1.1,cex=1.1,cex.axis=1.1,cex.lab=1.1)
abline(2,0,lty=2)
abline(-2,0,lty=2)
abline(0,0,lty=2)
# identify(td, n=1)
# title(sub="(c)")
fited = fitted(fit.model)
plot(fited ,td,xlab="valor ajustado (m?dia)", ylab="Residuo Componente do Desvio",ylim=c(b-1,a+1), pch=16,
main="",cex=1.1,cex.axis=1.1,cex.lab=1.1)
abline(2,0,lty=2)
abline(-2,0,lty=2)
abline(0,0,lty=2)
#
hist(td,xlab="Res?duo Componente do Desvio",ylab="densidade",probability=TRUE,main="",cex=1.1,cex.axis=1.1,cex.lab=1.1)
#
eta = predict(fit.model)
z = eta + resid(fit.model, type="pearson")/sqrt(w)
plot(predict(fit.model),z,xlab="Preditor Linear",ylab="Variavel z", pch=16,main="",cex=1.1,cex.axis=1.1,cex.lab=1.1)
lines(smooth.spline(predict(fit.model), z, df=2))
#
#---------------------------------------------------------------#
}
# Testes do tipo H_0: CB=M vs H_1: CB <> M
# fit.model: sa?da do modelo ajustado
# m.C & m.M: matrizes de interesse
testeF.CBM.MLG <- function(fit.model,m.C,m.M)
{
v.beta <-  cbind(fit.model$coef)
e.q <- nrow(m.C)
m.cov.beta <- (vcov(fit.model))
e.Q <- t(m.C%*%v.beta-m.M)%*%solve(m.C%*%m.cov.beta%*%t(m.C))%*%(m.C%*%v.beta-m.M)
e.pvalor <- 1-pchisq(e.Q,e.q)
cat("Estatistica Q = ",round(e.Q,2),"\n")
cat("gl = ",e.q,"\n")
cat("pvalor = ",round(e.pvalor,4),"\n")
cat("Matriz C :","\n")
print(m.C)
cat("Matriz M :","\n")
print(m.M)
}
# fit.model 1: H_0
# fit.model 1: modelo irrestritro
TRV.MLG <- function(fit.model1,fit.model2)
{
ep <- ncol(model.matrix(fit.model2))
eq <- ep-ncol(model.matrix(fit.model1))
desv1 <- deviance(fit.model1)
desv2 <- deviance(fit.model2)
e.TRV <- (desv1-desv2)
e.pvalor <- 1-pchisq(e.TRV,eq)
cat("Estatistica F = ",round(e.TRV,2),"\n")
cat("g.l = ",eq,"\n")
cat("pvalor = ",round(e.pvalor,4),"\n")
}
# fit.model 1: H_0
# fit.model 1: modelo irrestritro
AnaDesv.MLG <- function(fit.model1,fit.model2)
{
ep <- ncol(model.matrix(fit.model2))
eq <- ep-ncol(model.matrix(fit.model1))
n <- nrow(model.matrix(fit.model2))
desv1 <- deviance(fit.model1)
desv2 <- deviance(fit.model2)
e.F <- ((desv1-desv2)/eq)/(desv2/(n-ep))
e.pvalor <- 1-pf(e.F,eq,n-ep)
cat("Estatistica F = ",round(e.F,2),"\n")
cat("pvalor = ",round(e.pvalor,4),"\n")
}
library(Matrix)
library(plotrix)
# estima os par?metros de uma ?nica tabela
# r x s oriunda de um modelo multinomial
# ou produto de multinomiais
# LEMBRETE: A FUN??O SEMPRE CONCATENA VERTICALMENTE AS LINHAS. ASSIM
# NO CASO DO MODELO PRODUTO DE MULTINOMIAIS, CADA LINHA DEVE REPRESENTAR
# UMA MULTINOMIAL
#input= tabela: tabela de conting?ncia
#       modelo: 1 - multinomial, 2 - produto de multinomais
#       gama: n?vel de confian?a para a constru??o dos IC's
estima.theta<-function(tabela,modelo,gama)
{
auxl1 <-c(rownames(tabela))
auxl2 <-c(colnames(tabela))
label<-c(paste(auxl1[1],"&",auxl2[1]))
for(i in 1:nrow(tabela))
{
for(j in 1:ncol(tabela))
{
label<-rbind(label,c(paste(auxl1[i],"&",auxl2[j])))
}
}
label<-cbind(label[2:nrow(label),])
if(modelo ==1) # multinomial
{
vn <- c(t(tabela))
n  <- sum(vn)
ncat <- length(vn)
vp <- vn/n
#vp[vp==0]=0.01
vpc <- cbind(vp)
aux <- vpc%*%t(vpc)
mcov <- matrix(as.numeric((as.matrix(Diagonal(ncat,vpc))- aux)/n),ncat,ncat)
ep <- sqrt(diag(mcov))
epc<-cbind(ep)
}
else if(modelo ==2)# produto de multinomias
{
vn <- as.numeric(apply(tabela,1,sum))
vpg<- tabela/vn#c(t(tabela/vn))
ncatr<- ncol(tabela)
nmult<-nrow(tabela)
#vpg[vpg==0]=0.01
vp <- vpg[1,]
vpc <- cbind(vp)
aux <-vpc%*%t(vpc)
mcov <- matrix((as.matrix(Diagonal(ncatr,vpc))- aux)/vn[1],ncatr,ncatr)
mcovg <-mcov
for(j in 2:nmult)
{
vp <- vpg[j,]
vpc <- cbind(vp)
aux <-vpc%*%t(vpc)
mcov <- matrix((as.matrix(Diagonal(ncatr,vpc))- aux)/vn[j],ncatr,ncatr)
mcovg<-bdiag(mcovg,mcov)
}
mcov<-as.matrix(bdiag(mcovg))
vp<- c(t(vpg))
vpc<-cbind(vp)
ep<- sqrt(diag(mcov))
epc<-cbind(ep)
}
qic <- qnorm(0.5*(1+gama))
LIIC <- c(vpc)-c(qic*epc)
LSIC <- c(vpc)+ c(qic*epc)
mIC  <- cbind(LIIC,LSIC)
mIC[mIC[,1]<=0,1]=0
mIC[mIC[,2]>=1,2]=1
m.result <-cbind(round(vpc,2),round(epc,2),round(mIC,2))
rownames(m.result)<-label
colnames(m.result)<- c("Estimativa","EP","LIIC","LSIC")
cat("Estimativas:","\n")
print(m.result)
result<- list(vpc=vpc,epc=epc,mIC=mIC,mcov=mcov,label=label)
return(result)
}
# gera gr?ficos das porpor??es estimadas (sem considerar modelos)
#input= tabela: tabela de conting?ncia
#       result: objeto com o resultado da aplica??o da fun??o estima.theta
#       oplas: orienta??o dos "labels" do eixo "x"
#       eixo: dimens?o dos labels dos eixos
plot.graf.prop<-function(result,oplas,eixo)
{
label<-c(result$label)
vpc<-cbind(c(result$vpc))
mIC<-(result$mIC)
mIC<- cbind(c(mIC[,1]),c(mIC[,2]))
plotCI(vpc,ui=mIC[,2],li=mIC[,1],axes=F,xlab="categoria",ylab="propor??es",pch=19,cex=1.2,cex.axis=1.2,cex.lab=1.2)
axis(2,cex.axis=1.2)
axis(1,1:length(vpc),labels=label,cex.axis=eixo,las=oplas)
}
# Realiza testes do tipo Bpi=D para uma ?nica tabela
# r x s oriunda de um modelo multinomial
# ou produto de multinomiais
#input= result: objeto com o resultado da aplica??o da fun??o estima.theta
#       m.B e v.D: matriz e vetor definidores das hip?teses de interesse, respectivamente
test.Bpi.D<-function(result,m.B,v.D)
{
vpc<-cbind(c(result$vpc))
mcov<-result$mcov
mcov[mcov==0]<-0.000000000001
e.Q <-t(m.B%*%vpc-v.D)%*%solve(m.B%*%mcov%*%t(m.B))%*%(m.B%*%vpc-v.D)
ngl<-nrow(m.B)
e.pvalor<-1-pchisq(e.Q,ngl)
cat("Estatistica Q = ",round(e.Q,2),"\n")
cat("pvalor = ",round(e.pvalor,4),"\n")
cat("g.l. =",ngl,"\n")
cat("Matriz B :","\n")
print(m.B)
cat("Vetor D :","\n")
print(v.D)
}
# Ajusta modelos de regress?o do tipo Api=Xbeta para uma ?nica tabela
# r x s oriunda de um modelo multinomial
# ou produto de multinomiais
#input= result: objeto com o o resultado da aplica??o da fun??o estima.theta
#       m.B e m.X: matrizes definidoras do modelo de interesse
MR.Api.Xbeta<-function(result,m.A,m.X)
{
label<-c(result$label)
vpc<-cbind(c(result$vpc))
mcov<-result$mcov
mcov[mcov==0]<-0.000000000001
mcovF <- m.A%*%mcov%*%t(m.A)
auxav <- eigen(mcovF,only.values=TRUE)$values
nlmcovF <- nrow(mcovF)
while(min(auxav) <= 0.000000001)
{
mcovF <- mcovF + diag(0.00001,nlmcovF,nlmcovF)
auxav <- eigen(mcovF,only.values=TRUE)$values
}
imcovF <- solve(mcovF)
vF <- m.A%*%vpc
mcovbeta <- solve(t(m.X)%*%imcovF%*%m.X)
vbeta<- mcovbeta%*%t(m.X)%*%imcovF%*%vF
epbeta <- cbind(c(sqrt(diag(mcovbeta))))
epl <- m.X%*%vbeta
eQ <-t(vF-epl)%*%imcovF%*%(vF-epl)
ngl<-nrow(m.X)-nrow(vbeta)
epvalor<-1-pchisq(eQ,ngl)
cat("Est. dos par. beta","\n")
print(round(cbind(vbeta,epbeta),2))
cat("Teste para a qualidade do ajuste do modelo = ",round(eQ,2),"\n")
cat("pvalor = ",round(epvalor,4),"\n")
cat("g.l. =",ngl,"\n")
cat("Matriz A :","\n")
print(m.A)
cat("Matriz X :","\n")
print(m.X)
result<- list(vpc=vpc,vbeta=vbeta,epbeta=epbeta,mcovbeta=mcovbeta,label=label)
return(result)
}
# Testa hip?teses do tipo CB= M para modelos lineares ajustados
# via fun??o MR.Api.Xbeta
# input = result: objeto com o resultado da aplica??o da fun??o MR.Api.Xbeta
# Matrizes m.C e v.M
testa.CB.M.Api.Xbeta<-function(result,m.C,v.M)
{
vbeta <- result$vbeta
mcovbeta <- result$mcovbeta
e.QC <- t(m.C%*%vbeta - v.M)%*%solve(m.C%*%mcovbeta%*%t(m.C))%*%(m.C%*%vbeta - v.M)
ngl<-nrow(m.C)
e.pvalor<-1-pchisq(e.QC,ngl)
cat("Estatistica Q = ",round(e.QC,2),"\n")
cat("pvalor = ",round(e.pvalor,4),"\n")
cat("g.l. =",ngl,"\n")
cat("Matriz C :","\n")
print(m.C)
cat("Vetor M :","\n")
print(v.M)
}
#Estima propor??es sob o modelo Api=Xbeta
#input= result: objeto com o resultado da aplica??o da fun??o MR.Api.Xbeta
#       m.H e v.F: matriz e vetor que recuperam as propor??es originais
estim.prp.ApiXbeta<-function(result,m.H,v.F,gama)
{
label<-result$label
vpc <- result$vpc
vbeta<-result$vbeta
mcovbeta<-result$mcovbeta
vpesm <- m.H%*%vbeta + v.F
mcovsm <- m.H%*%mcovbeta%*%t(m.H)
vepsm <- sqrt(diag(mcovsm))
qic <- qnorm(0.5*(1+gama))
LIIC <- c(vpesm)-c(qic*vepsm)
LSIC <- c(vpesm)+ c(qic*vepsm)
mIC  <- cbind(LIIC,LSIC)
mIC[mIC[,1]<=0,1]=0
mIC[mIC[,2]>=1,2]=1
result<- list(vpesm=vpesm,vepsm=vepsm,mcovbeta=mcovbeta,mIC=mIC)
plot(vpc,axes=F,ylim=c(min(vpc,mIC),max(vpc,mIC)),xlab="categoria",ylab="propor??es",cex=1.2)
plotCI(vpesm,ui=mIC[,2],li=mIC[,1],axes=F,pch=19,cex=1.2,cex.axis=1.2,cex.lab=1.2,add=T)
axis(2,cex.axis=1.2)
axis(1,1:length(vpc),labels=label,cex.axis=1.2)
}
# Ajusta modelos de regress?o do tipo AlnGpi=Xbeta para uma ?nica tabela
# r x s oriunda de um modelo multinomial
# ou produto de multinomiais
# input= result: objeto com o o resultado da aplica??o da fun??o estima.theta
#       m.B, m.G e m.X: matrizes definidoras do modelo de interesse
MR.AlnGpi.Xbeta<-function(result,m.A,m.G,m.X)
{
label<-c(result$label)
vpc<-cbind(c(result$vpc))
mcov<-result$mcov
mcov[mcov==0]<-0.000000000001
auxmG<-m.G%*%vpc
auxmG[auxmG==0]<-0.000000000001
m.B <- solve(diag(c(auxmG)))
mPsi <- m.A%*%m.B%*%m.G
mcovF <- mPsi%*%mcov%*%t(mPsi)
auxav <- eigen(mcovF,only.values=TRUE)$values
nlmcovF <- nrow(mcovF)
while(min(auxav) <= 0.001)
{
mcovF <- mcovF + diag(0.00001,nlmcovF,nlmcovF)
auxav <- eigen(mcovF,only.values=TRUE)$values
}
imcovF <- solve(mcovF)
vF <- m.A%*%(log(auxmG))
mcovbeta <- solve(t(m.X)%*%imcovF%*%m.X)
vbeta<- mcovbeta%*%t(m.X)%*%imcovF%*%vF
epbeta <- cbind(c(sqrt(diag(mcovbeta))))
epl <- m.X%*%vbeta
eQ <-t(vF-epl)%*%imcovF%*%(vF-epl)
ngl<-nrow(m.X)-nrow(vbeta)
epvalor<-1-pchisq(eQ,ngl)
cat("Est. dos par. beta","\n")
print(round(cbind(vbeta,epbeta),2))
cat("Teste para a qualidade do ajuste do modelo = ",round(eQ,2),"\n")
cat("pvalor = ",round(epvalor,4),"\n")
cat("g.l. =",ngl,"\n")
cat("Matriz A :","\n")
print(m.A)
cat("Matriz X :","\n")
print(m.X)
result<- list(vpc=vpc,vbeta=vbeta,epbeta=epbeta,mcovbeta=mcovbeta,label=label)
return(result)
}
par(mfrow=c(1,2))
plot(dados$`proporção de sementes germinadas`[1:3],axes=FALSE,ylim=c(0.0,1.0),cex.lab=1.5,xlab="Nível de temperatura",ylab="Proporção de sementes germinadas")
axis(2,cex.axis=1.2)
axis(1,1:3,c("21","42", "62"),cex.axis=1.2)
plotCI(dados$`proporção de sementes germinadas`[1:3],liw=1.96*dados$`proporção de sementes germinadas`[1:3]*dados$sd[1:3],uiw=1.96*dados$`proporção de sementes germinadas`[1:3]*dados$sd[1:3],pch=19,add=TRUE,cex.lab=1.5,slty=1,lwd=2,col=4,cex=1.2)
lines(dados$`proporção de sementes germinadas`[1:3],lwd=2,col=4)
plotCI(dados$`proporção de sementes germinadas`[4:6],liw=1.96*dados$`proporção de sementes germinadas`[4:6]*dados$sd[4:6],uiw=1.96*dados$`proporção de sementes germinadas`[4:6]*dados$sd[4:6],pch=19,add=TRUE,cex.lab=1.5,slty=1,lwd=2,col=2,cex=1.2)
lines(dados$`proporção de sementes germinadas`[4:6],lwd=2,col=2)
plotCI(dados$`proporção de sementes germinadas`[7:9],liw=1.96*dados$`proporção de sementes germinadas`[7:9]*dados$sd[7:9],uiw=1.96*dados$`proporção de sementes germinadas`[7:9]*dados$sd[7:9],pch=19,add=TRUE,cex.lab=1.5,slty=1,lwd=2,col=1,cex=1.2)
lines(dados$`proporção de sementes germinadas`[7:9],lwd=2,col=1)
legend(1,0.15,col=c(4,2,1),lwd=c(2,2),pch=c(19,23),pt.bg=c(2,2),legend=c("Umidade baixa para germinação em 11ºC","Umidade média para germinação em 11ºC", "Umidade alta para germinação em 11ºC"),bty="n",cex=1)
plot(dados$`proporção de sementes germinadas`[10:12],axes=FALSE,ylim=c(0.0,1.0),cex.lab=1.5,xlab="Nível de temperatura",ylab="Proporção de sementes germinadas")
axis(2,cex.axis=1.2)
axis(1,1:3,c("21","42", "62"),cex.axis=1.2)
plotCI(dados$`proporção de sementes germinadas`[10:12],liw=1.96*dados$`proporção de sementes germinadas`[10:12]*dados$sd[10:12],uiw=1.96*dados$`proporção de sementes germinadas`[10:12]*dados$sd[10:12],pch=19,add=TRUE,cex.lab=1.5,slty=1,lwd=2,col=4,cex=1.2)
lines(dados$`proporção de sementes germinadas`[10:12],lwd=2,col=4)
plotCI(dados$`proporção de sementes germinadas`[13:15],liw=1.96*dados$`proporção de sementes germinadas`[13:15]*dados$sd[13:15],uiw=1.96*dados$`proporção de sementes germinadas`[13:15]*dados$sd[13:15],pch=19,add=TRUE,cex.lab=1.5,slty=1,lwd=2,col=2,cex=1.2)
lines(dados$`proporção de sementes germinadas`[13:15],lwd=2,col=2)
plotCI(dados$`proporção de sementes germinadas`[16:18],liw=1.96*dados$`proporção de sementes germinadas`[16:18]*dados$sd[16:18],uiw=1.96*dados$`proporção de sementes germinadas`[16:18]*dados$sd[16:18],pch=19,add=TRUE,cex.lab=1.5,slty=1,lwd=2,col=1,cex=1.2)
lines(dados$`proporção de sementes germinadas`[16:18],lwd=2,col=1)
legend(1,0.15,col=c(4,2,1),lwd=c(2,2),pch=c(19,23),pt.bg=c(2,2),legend=c("Umidade baixa para germinação em 21ºC","Umidade média para germinação em 21ºC", "Umidade alta para germinação em 21ºC"),bty="n",cex=1)
x = rbind(cbind(1,0,0,0),cbind(1,1,0,0),cbind(0,0,1,0),cbind(0,0,1,1))
x
par(mfrow=c(1,2))
plot(dados$`proporção de sementes germinadas`[1:3],axes=FALSE,ylim=c(0.0,1.0),cex.lab=1.5,xlab="Nível de temperatura",ylab="Proporção de sementes germinadas")
axis(2,cex.axis=1.2)
axis(1,1:3,c("21","42", "62"),cex.axis=1.2)
plotCI(dados$`proporção de sementes germinadas`[1:3],liw=1.96*dados$`proporção de sementes germinadas`[1:3]*dados$sd[1:3],uiw=1.96*dados$`proporção de sementes germinadas`[1:3]*dados$sd[1:3],pch=19,add=TRUE,cex.lab=1.5,slty=1,lwd=2,col=4,cex=1.2)
lines(dados$`proporção de sementes germinadas`[1:3],lwd=2,col=4)
plotCI(dados$`proporção de sementes germinadas`[4:6],liw=1.96*dados$`proporção de sementes germinadas`[4:6]*dados$sd[4:6],uiw=1.96*dados$`proporção de sementes germinadas`[4:6]*dados$sd[4:6],pch=19,add=TRUE,cex.lab=1.5,slty=1,lwd=2,col=2,cex=1.2)
lines(dados$`proporção de sementes germinadas`[4:6],lwd=2,col=2)
plotCI(dados$`proporção de sementes germinadas`[7:9],liw=1.96*dados$`proporção de sementes germinadas`[7:9]*dados$sd[7:9],uiw=1.96*dados$`proporção de sementes germinadas`[7:9]*dados$sd[7:9],pch=19,add=TRUE,cex.lab=1.5,slty=1,lwd=2,col=1,cex=1.2)
lines(dados$`proporção de sementes germinadas`[7:9],lwd=2,col=1)
legend(1,0.15,col=c(4,2,1),lwd=c(2,2),pch=c(19,23),pt.bg=c(2,2),legend=c("Umidade baixa para germinação em 11ºC","Umidade média para germinação em 11ºC", "Umidade alta para germinação em 11ºC"),bty="n",cex=1)
plot(dados$`proporção de sementes germinadas`[10:12],axes=FALSE,ylim=c(0.0,1.0),cex.lab=1.5,xlab="Nível de temperatura",ylab="Proporção de sementes germinadas")
axis(2,cex.axis=1.2)
axis(1,1:3,c("21","42", "62"),cex.axis=1.2)
plotCI(dados$`proporção de sementes germinadas`[10:12],liw=1.96*dados$`proporção de sementes germinadas`[10:12]*dados$sd[10:12],uiw=1.96*dados$`proporção de sementes germinadas`[10:12]*dados$sd[10:12],pch=19,add=TRUE,cex.lab=1.5,slty=1,lwd=2,col=4,cex=1.2)
lines(dados$`proporção de sementes germinadas`[10:12],lwd=2,col=4)
plotCI(dados$`proporção de sementes germinadas`[13:15],liw=1.96*dados$`proporção de sementes germinadas`[13:15]*dados$sd[13:15],uiw=1.96*dados$`proporção de sementes germinadas`[13:15]*dados$sd[13:15],pch=19,add=TRUE,cex.lab=1.5,slty=1,lwd=2,col=2,cex=1.2)
lines(dados$`proporção de sementes germinadas`[13:15],lwd=2,col=2)
plotCI(dados$`proporção de sementes germinadas`[16:18],liw=1.96*dados$`proporção de sementes germinadas`[16:18]*dados$sd[16:18],uiw=1.96*dados$`proporção de sementes germinadas`[16:18]*dados$sd[16:18],pch=19,add=TRUE,cex.lab=1.5,slty=1,lwd=2,col=1,cex=1.2)
lines(dados$`proporção de sementes germinadas`[16:18],lwd=2,col=1)
legend(1,0.15,col=c(4,2,1),lwd=c(2,2),pch=c(19,23),pt.bg=c(2,2),legend=c("Umidade baixa para germinação em 21ºC","Umidade média para germinação em 21ºC", "Umidade alta para germinação em 21ºC"),bty="n",cex=1)
par(mfrow=c(1,2))
plot(dados$`proporção de sementes germinadas`[1:3],axes=FALSE,ylim=c(0.0,1.0),cex.lab=1.5,xlab="Nível de temperatura",ylab="Proporção de sementes germinadas")
axis(2,cex.axis=1.2)
axis(1,1:3,c("21ºC","42ºC", "62ºC"),cex.axis=1.2)
plotCI(dados$`proporção de sementes germinadas`[1:3],liw=1.96*dados$`proporção de sementes germinadas`[1:3]*dados$sd[1:3],uiw=1.96*dados$`proporção de sementes germinadas`[1:3]*dados$sd[1:3],pch=19,add=TRUE,cex.lab=1.5,slty=1,lwd=2,col=4,cex=1.2)
lines(dados$`proporção de sementes germinadas`[1:3],lwd=2,col=4)
plotCI(dados$`proporção de sementes germinadas`[4:6],liw=1.96*dados$`proporção de sementes germinadas`[4:6]*dados$sd[4:6],uiw=1.96*dados$`proporção de sementes germinadas`[4:6]*dados$sd[4:6],pch=19,add=TRUE,cex.lab=1.5,slty=1,lwd=2,col=2,cex=1.2)
lines(dados$`proporção de sementes germinadas`[4:6],lwd=2,col=2)
plotCI(dados$`proporção de sementes germinadas`[7:9],liw=1.96*dados$`proporção de sementes germinadas`[7:9]*dados$sd[7:9],uiw=1.96*dados$`proporção de sementes germinadas`[7:9]*dados$sd[7:9],pch=19,add=TRUE,cex.lab=1.5,slty=1,lwd=2,col=1,cex=1.2)
lines(dados$`proporção de sementes germinadas`[7:9],lwd=2,col=1)
legend(1,0.15,col=c(4,2,1),lwd=c(2,2),pch=c(19,23),pt.bg=c(2,2),legend=c("Umidade baixa para germinação em 11ºC","Umidade média para germinação em 11ºC", "Umidade alta para germinação em 11ºC"),bty="n",cex=1)
plot(dados$`proporção de sementes germinadas`[10:12],axes=FALSE,ylim=c(0.0,1.0),cex.lab=1.5,xlab="Nível de temperatura",ylab="Proporção de sementes germinadas")
axis(2,cex.axis=1.2)
axis(1,1:3,c("21ºC","42ºC", "62ºC"),cex.axis=1.2)
plotCI(dados$`proporção de sementes germinadas`[10:12],liw=1.96*dados$`proporção de sementes germinadas`[10:12]*dados$sd[10:12],uiw=1.96*dados$`proporção de sementes germinadas`[10:12]*dados$sd[10:12],pch=19,add=TRUE,cex.lab=1.5,slty=1,lwd=2,col=4,cex=1.2)
lines(dados$`proporção de sementes germinadas`[10:12],lwd=2,col=4)
plotCI(dados$`proporção de sementes germinadas`[13:15],liw=1.96*dados$`proporção de sementes germinadas`[13:15]*dados$sd[13:15],uiw=1.96*dados$`proporção de sementes germinadas`[13:15]*dados$sd[13:15],pch=19,add=TRUE,cex.lab=1.5,slty=1,lwd=2,col=2,cex=1.2)
lines(dados$`proporção de sementes germinadas`[13:15],lwd=2,col=2)
plotCI(dados$`proporção de sementes germinadas`[16:18],liw=1.96*dados$`proporção de sementes germinadas`[16:18]*dados$sd[16:18],uiw=1.96*dados$`proporção de sementes germinadas`[16:18]*dados$sd[16:18],pch=19,add=TRUE,cex.lab=1.5,slty=1,lwd=2,col=1,cex=1.2)
lines(dados$`proporção de sementes germinadas`[16:18],lwd=2,col=1)
legend(1,0.15,col=c(4,2,1),lwd=c(2,2),pch=c(19,23),pt.bg=c(2,2),legend=c("Umidade baixa para germinação em 21ºC","Umidade média para germinação em 21ºC", "Umidade alta para germinação em 21ºC"),bty="n",cex=1)
dados
dados %>% filter(temp.germ=="11")
library(plyr)
dados %>% filter(temp.germ=="11") %>% summarise(media=mean(sem.germ)) %>% group_by(nivel.um)
dados %>% filter(temp.germ=="11") %>% group_by(nivel.um) %>%  summarise(media=mean(sem.germ))
dados %>% filter(temp.germ=="11") %>% group_by(nivel.um)
which(dados$temp.germ==11)
ajuda <- dados[which(dados$temp.germ==11),]
which(dados$temp.germ==11)
ajuda
ddply(ajuda,.(ajuda$nivel.um),summarise,media=mean(ajuda$`proporção de sementes germinadas`),dp=sqrt(var(ajuda$`proporção de sementes germinadas`)),vari=var(ajuda$`proporção de sementes germinadas`),cv=100*((sqrt(var(ajuda$`proporção de sementes germinadas`))/mean(ajuda$`proporção de sementes germinadas`))),n=length(ajuda$`proporção de sementes germinadas`))
98+96+62
(98+96+62)/3
resumo_ajuda <- ddply(ajuda,.(ajuda$nivel.um),summarise,media=mean(ajuda$sem.germ),dp=sqrt(var(ajuda$sem.germ)),vari=var(ajuda$sem.germ),cv=100*((sqrt(var(ajuda$sem.germ))/mean(ajuda$sem.germ))),n=length(ajuda$sem.germ))
rm(resumo_ajuda)
ddply(ajuda,.(ajuda$nivel.um),summarise,media=mean(ajuda$sem.germ),dp=sqrt(var(ajuda$sem.germ)),vari=var(ajuda$sem.germ),cv=100*((sqrt(var(ajuda$sem.germ))/mean(ajuda$sem.germ))),n=length(ajuda$sem.germ))
?ddply
ddply(ajuda,.(ajuda$nivel.um, ajuda$sem.germ),summarise,media=mean(ajuda$sem.germ),dp=sqrt(var(ajuda$sem.germ)),vari=var(ajuda$sem.germ),cv=100*((sqrt(var(ajuda$sem.germ))/mean(ajuda$sem.germ))),n=length(ajuda$sem.germ))
ddply(ajuda,.(ajuda$nivel.um),summarise,media=mean(ajuda$sem.germ),dp=sqrt(var(ajuda$sem.germ)),vari=var(ajuda$sem.germ),cv=100*((sqrt(var(ajuda$sem.germ))/mean(ajuda$sem.germ))))
ajuda %>% summarise(media=mean(sem.germ), vari = var(sem.germ) ,dp = sd(sem.germ)) %>% group_by(nivel.um)
ajuda %>% summarise(media=mean(sem.germ), vari = var(sem.germ) ,dp = sd(sem.germ))
ajuda %>% group_by(nivel.um)
ajuda %>% group_by(nivel.um) %>% summarise(media=mean(sem.germ), vari = var(sem.germ) ,dp = sd(sem.germ))
(98+96+62)/3
ajuda %>% group_by(nivel.um==1)
ajuda %>% group_by(nivel.um=="1")
ddply(ajuda,.(ajuda$nivel.um),summarise,media=mean(ajuda$sem.germ),n=length(ajuda$sem.germ))
ddply(ajuda,.(ajuda$nivel.um),summarise,media=mean(ajuda$sem.germ),n=length(ajuda$sem.germ/3))
resumo_ajuda <- ddply(ajuda,.(ajuda$nivel.um),summarise,media=mean(ajuda$sem.germ),n=3)
resumo_ajuda
ajuda
rm(resumo_ajuda)
ddply(ajuda,.(ajuda$nivel.um),summarise,media=mean(ajuda$sem.germ),n=3)
resumo_ajuda <- ddply(ajuda,.(ajuda$nivel.um),summarise,media=mean(ajuda$sem.germ))
rm(resumo_ajuda)
ddply(ajuda,.(ajuda$nivel.um),summarise,media=mean(ajuda$sem.germ))
(21+42+62)/3
(21+42+62)*3/9
((21+42+62)+(21+42+62)*2+(21+42+62)*3)/5
